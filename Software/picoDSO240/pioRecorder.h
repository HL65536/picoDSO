// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// timingTester //
// ------------ //

#define timingTester_wrap_target 0
#define timingTester_wrap 5

static const uint16_t timingTester_program_instructions[] = {
    //     .wrap_target
    0x5008, //  0: in     pins, 8         side 1
    0x5008, //  1: in     pins, 8         side 1
    0x5008, //  2: in     pins, 8         side 1//new val 96/6 48/6
    0x4008, //  3: in     pins, 8         side 0//new val 192/6
    0x4008, //  4: in     pins, 8         side 0//new val 288/6
    0x4008, //  5: in     pins, 8         side 0//glitches 288/6
            //     .wrap
};

/*static const uint16_t timingTester_program_instructions[] = {
    //     .wrap_target
    0x5008, //  0: in     pins, 8         side 1
    0x5008, //  1: in     pins, 8         side 1
    0x4008, //  2: in     pins, 8         side 0//new val 96/4 & 48/4
    0x4008, //  3: in     pins, 8         side 0//new val 192/4; glitch 240/4 & 288/4
            //     .wrap
};*/

/*static const uint16_t timingTester_program_instructions[] = {
    //     .wrap_target
    0x5008, //  0: in     pins, 8         side 1//new val 24/2 48/2; glitch @ 60/2 & @120/2; new val @
    0x4008, //  1: in     pins, 8         side 0
            //     .wrap
};*/

// timing tests ADS830E:
// 48MHz/6: ideal point @ end 0, transition point @ end 1, clean >56
// 96MHz/6: ideal point @ end 0, transition point @ end 1, clean >60
// 192MHz/6: ideal point @ transition 0->1, transition point @ 1->0, clean>80
// 288MHz/6: ideal point @ start 1, transition point @ start 0, clean>96
//
// 48MHz/4: ideal point @ transition 0->1, transition point @ ransition point @ 1->0, clean >56
// 96MHz/4: ideal point @ transition 0->1, transition point @ transition point @ 1->0, clean >60
// 192MHz/4: ideal point @ mid 1, transition point @ mid 0, clean>80
// 288MHz/4: ideal point @ end 1, transition point @ end 0, clean>96

#if !PICO_NO_HARDWARE
static const struct pio_program timingTester_program = {
    .instructions = timingTester_program_instructions,
    .length = timingTester_wrap+1,
    .origin = -1,
};


static inline pio_sm_config timingTester_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + timingTester_wrap_target, offset + timingTester_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#endif


#define recordADS830E_wrap_target 28
#define recordADS830E_wrap 29

static const uint16_t recordADS830E_program_instructions[] = {
    0xb042, //  0: nop                    side 1
    0xa042, //  1: nop                    side 0
    0xb042, //  2: nop                    side 1
    0xa042, //  3: nop                    side 0
    0xb042, //  4: nop                    side 1
    0xa042, //  5: nop                    side 0
    0xb042, //  6: nop                    side 1
    0xa042, //  7: nop                    side 0
    0xb042, //  8: nop                    side 1
    0xa042, //  9: nop                    side 0
    0xb042, // 10: nop                    side 1
    0xa042, // 11: nop                    side 0
    0xb042, // 12: nop                    side 1
    0xa042, // 13: nop                    side 0
    0xb042, // 14: nop                    side 1
    0xa042, // 15: nop                    side 0
    0xb042, // 16: nop                    side 1
    0xa042, // 17: nop                    side 0
    0xb042, // 18: nop                    side 1
    0xa042, // 19: nop                    side 0
    0xb042, // 20: nop                    side 1
    0xa042, // 21: nop                    side 0
    0xb042, // 22: nop                    side 1
    0xa042, // 23: nop                    side 0
    0xb042, // 24: nop                    side 1
    0xa042, // 25: nop                    side 0
    0xb042, // 26: nop                    side 1
    0xa042, // 27: nop                    side 0
            //     .wrap_target
    0x5008, // 0xb042, // 28: nop                    side 1
    0xa042, // 0x4008, // 29: in     pins, 8         side 0
            //      .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program recordADS830E_program = {
    .instructions = recordADS830E_program_instructions,
    .length = 30,
    .origin = -1,
};

static inline pio_sm_config recordADS830E_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + recordADS830E_wrap_target, offset + recordADS830E_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#endif

#define recordADC08100_wrap_target 0
#define recordADC08100_wrap 1

static const uint16_t recordADC08100_program_instructions[] = {
    //     .wrap_target
    //0x4008, // 29: in     pins, 8         side 0
    //0xb042, // 0: nop                    side 1
            //     .wrap

    0xa042, //  0: nop                    side 0
    0x5008, //  1: in     pins, 8         side 1
};

#if !PICO_NO_HARDWARE
static const struct pio_program recordADC08100_program = {
    .instructions = recordADC08100_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config recordADC08100_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + recordADC08100_wrap_target, offset + recordADC08100_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif
